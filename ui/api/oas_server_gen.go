// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AddVote implements AddVote operation.
	//
	// Add a vote to a poll.
	//
	// POST /polls/{pollId}/vote
	AddVote(ctx context.Context, req VoteCreationParameter, params AddVoteParams) (AddVoteRes, error)
	// CreatePoll implements CreatePoll operation.
	//
	// Create a new poll.
	//
	// POST /polls/create
	CreatePoll(ctx context.Context, req *PollCreationParameter) (CreatePollRes, error)
	// GetPoll implements getPoll operation.
	//
	// Get a specific poll.
	//
	// GET /polls/{pollId}
	GetPoll(ctx context.Context, params GetPollParams) (GetPollRes, error)
	// GetVote implements getVote operation.
	//
	// Get a specific vote in a poll.
	//
	// GET /polls/{pollId}/vote/{voteId}
	GetVote(ctx context.Context, params GetVoteParams) (GetVoteRes, error)
	// Login implements login operation.
	//
	// User login.
	//
	// POST /auth/login
	Login(ctx context.Context, req *LoginParameter) (LoginRes, error)
	// Register implements Register operation.
	//
	// Register a new user.
	//
	// POST /auth/register
	Register(ctx context.Context, req *UserRegisterParameter) (RegisterRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
